TYPE

button{
	background-color:purple;
	height:150px;
	width:500px;
	color:white
}

<button>Button</button>

CLASS

.title{
	font-size:54px;	
}

<div class = "title">Title</div>

ID

#content{
	font-size:27px;
}

<p id = "content">Content</p>

Pseudo-classes
A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, :hover can be used to change a button's color when the user's pointer hovers over it.

selector:pseudo-class {
  property: value;
}


Attributes
Attribute selectors are a special kind of selector that will match elements based on their attributes and attribute values.

Their generic syntax consists of square brackets ([]) containing an attribute name followed by an optional condition to match against the value of the attribute.

Attribute selectors can be divided into two categories depending on the way they match attribute values:

Presence and value attribute selectors and
Substring value attribute selectors.
These attribute selectors try to match an exact attribute value:

[attr] This selector will select all elements with the attribute attr, whatever its value.
[attr=val] This selector will select all elements with the attribute attr, but only if its value is val.
[attr~=val] This selector will select all elements with the attribute attr, but only if val is one of a space-separated list of words contained in attr's value. (This one is a bit more complex, so checking some documentation might be helpful.)

img[alt]

we can select multiple HTML elements in the same CSS rule by separating them with commas. Add this to our styles.css file:

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Helvetica", "Arial", sans-serif;
}



Inline
Although CSS is a different language than HTML, it’s possible to write CSS code directly within HTML code using inline styles.

To style an HTML element, you can add the style attribute directly to the opening tag. After you add the attribute, you can set it equal to the CSS style(s) you’d like applied to that element.

<p style="color: red;">I'm learning to code!</p>

If you’d like to add more than one style with inline styles, simply keep adding to the style attribute. Make sure to end the styles with a semicolon (;).

<p style="color: red; font-size: 20px;">I'm learning to code!</p>




Style Tag
Inline styles are a fast way of styling HTML, but they also have limitations. If you wanted to style, for example, multiple <h1> elements, you would have to add inline styling to each element manually. In addition, you would also have to maintain the HTML code when additional <h1> elements are added.

Fortunately, HTML allows you to write CSS code in its own dedicated section with the <style> element. CSS can be written between opening and closing <style> tags. To use the <style> element, it must be placed inside of the <head> element.

<head>
  <style></style>
</head>
After adding a <style> tag in the head section, you can begin writing CSS code.

<head>
  <style>
    p {
      color: red;
      font-size: 20px;
    }
  </style>
</head>




External Stylesheets
When HTML and CSS code are in separate files, the files must be linked. Otherwise, the HTML file won’t be able to locate the CSS code, and the styling will not be applied.

You can use the <link> element to link HTML and CSS files together. The <link> element must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:

href — like the anchor element, the value of this attribute must be the address, or path, to the CSS file.
type — this attribute describes the type of document that you are linking to (in this case, a CSS file). The value of this attribute should be set to text/css.
rel — this attribute describes the relationship between the HTML file and the CSS file.
Because you are linking to a stylesheet, the value of rel should be set to stylesheet.

When linking an HTML file and a CSS file together, the <link> element will look like the following:

<link href="https://udacity.com/style.css" type="text/css" rel="stylesheet" />
Specifying the path to the stylesheet using a URL is one way of linking a stylesheet.

If the CSS file is stored in the same directory as your HTML file, then you can specify a relative path instead of a URL, like so:

<link href="./style.css" type="text/css" rel="stylesheet" />




Because elements can have multiple CSS selectors, there is a hierarchy for the weight given to each type of selector. Here is the logical order of selectors from least to most weight assigned:

Type selectors (e.g., h1) and pseudo-elements (e.g., ::before).
Class selectors (e.g., .example), attributes selectors (e.g., [type="radio"]) and pseudo-classes (e.g., :hover).
ID selectors (e.g., #example).




MULTIPLE ELEMENTS AND CLASSES:

ul > li{
	color: blue;
}

.list > list-item{
	color: red;
}






BOX MODEL

.box{
	width: ;
	height: ;
	border: 2px solid red;
	margin: ;
	padding: ;
	border-bottom: 1px solid blue;
	border-top: 1px solid blue;
	border-left: 3px solid green:
	border-right: 3px solid green;
	border-radius: 25px;
	background-image: url("demo.jpg");
	background-size: cover; contain;
}

FLEXBOX:

.container{
	display: flex;
	flex-direction: row;
	align-items: center; stretch; flex-start; flex-end;
	justify-content: center; flex-start; flex-end; space-around; space-between; space-evenly;
	border: 2px solid yellow;
}
.box{
	width: 250px;
	height: 150px;
	border: 1px solid red;
}


<div class = "container">
	<div class = "box" id = "one">Box 1</div>
	<div class = "box" id = "two">Box 2</div>
	<div class = "box" id = "three">Box 3</div>
</div>


Axes and Direction with Flexbox

The Flexbox model relies on two axes: the main axis and the cross axis. The main axis is defined by flex-direction, which has four possible values:

row
row-reverse
column
column-reverse
The two row settings will create the main axis horizontally - or inline direction. The two column settings will create the main axis vertically - or block direction. block or inline here refer to the CSS display settings which we have covered previously.

The axis determines the flow of your content - you can think of this as being either rows or columns - and they will be determined when you start aligning and justifying content within a flex container.


GRID

To use CSS Grid set the display property of the container element to grid.

After setting the display property of your container div to grid, the next step is to set the rows and columns in your grid which can be done with the CSS properties:

grid-template-columns
grid-template-rows

grid-template-columns: 60px 60px;
grid-template-rows: 160px 60px;
grid-gap: 20px;

And to define gutters between rows and columns you can use the property grid-gap on the parent container that has the display property set to grid.


GRID AREAS

The grid-area property specifies a particular area or set of rows and columns that a grid item occupies. It is applied to the grid item itself with CSS. Here is an example:

.item{
  grid-area: 1/2/3/3
}

.container{
	display: grid;
	width: 100%;
	margin: auto;
	grid-template-columns: 30px 300px;
	grid-template-rows: 250px 600px 30px;
	grid-gap: 15px;
	grid-template-areas:
	"top top"
	"bottomLeft bottomRight";
	border: 2px solid yellow;
	justify-content: center;
}
.box{
	display: flex;
	align-items: center;
	justify-content: center;
	border: 1px solid red;
}
#one{
	grid area: top;
	background-image: url('images/waterfall.jpg');
	background-size: contain; stretch;
	background-repeat: no-repeat;
}
#two{
	grid-area: bottomLeft;
}
#three{
	grid-area: bottomRight;
}

<div class = "container">
	<div class="box" id="one">Box 1</div>
	<div class="box" id="two">Box 2</div>
	<div class="box" id="three">Box 3</div>
</div>

Becausegrid-area is shorthand for the properties: grid-row-start, grid-column-start, grid-row-end and grid-column-end, the code above places the item from rows 1-3, and columns 2-3.


		grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
		grid-template-columns: repeat(6, 1fr);

.container{
		display: grid;
		width: 80vw;
		height: 100vm;
		grid-auto-rows: minmax(50px, 135px)
		grid-template-columns: 1fr, 1fr;
		grid-gap: 15px;
		justify-content: center;
		grid-auto-flow: row;
}
#item{
	grid-row: span 2;
}


.container {  
    display: grid;  
    grid-gap: 5px;  
    grid-template-columns: repeat(auto-fit, 100px);
    grid-template-rows: repeat(2, 100px);  
}

.container {  
    display: grid;  
    grid-gap: 5px;  
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-template-rows: repeat(2, 100px);  
}

NESTED GRIDS

.container {
  display:grid;
  // ...
}

#one {
  display:grid
}




MEDIA QUERIES

Media queries are used to set different style rules for different devices or sized screens. We use breakpoints to set the condition of a media query. The logic is:

@media(feature:value)


@media(min-width:900px) {
  body{
   background:red;
 }
}

Media queries are used to create responsive layouts using breakpoints. Below is an example of the syntax that is used for creating media queries:

@media(min-width:1100px) {
  body{
    font-size: 27px;
  }
}






INLINE

<div class=”box”>Box 1</div>
<div class=”box”>Box 2</div>
In the CSS code if we set the box class display property to block, each rectangle would take up its own line and would be positioned one on top of the other. However, if we set the display property to inline-block, the rectangles would be displayed side by side on the same line. Here is what the CSS could look like:

.box{
  display: inline-block;
}
The value inline is most often used to highlight specific text within a larger text element, span elements are a common example. Elements set to inline display have no width or height and only occupy the space that their text property (or .innerHTML property) takes up. So in our box class example above, the rectangles would display on the same line but only occupy as much space as their text needs to display.

/* Anything smaller than first breakpoint 600px */
.container {
  // rules for small screen
}

/* Medium Screens */
@media (min-width: 600px) and (max-width:900px) {
  .container {
    // rules for medium-sized screen
  }
}

/* Large Screens */
@media (min-width:901px) {
  .container {
    // rules for large screen
  }
}




Display and Positioning: Z-index
When elements overlap, they are ordered on the z-axis (i.e., which element covers another). The z-index CSS property can be used to specify the z-order of these overlapping elements. Overlapping elements with a larger z-index cover those with a smaller one.

Elements may overlap for a number of reasons; for instance, elements positioned absolutely, or elements with negative values set for their margin property. In these instances we need a way to determine which element should be displayed on top. Without explicitly using z-index the last element written to the DOM (the last element you wrote in your code) will appear on top of all the others, and so on up the chain of your elements.

As an example, let’s say we had two rectangles, positioned absolutely and overlapping each other-- the code for that could look like this:

<style>
.box {
  width: 200px;
   height: 200px;
  position: absolute;
}

#one {
  background: red;
  top: 100px;
  left: 150px;
}

#two {
  background: yellow;
  top: 80px;
  left: 100px;
}
</style>

<html>
  <div id=”one” class =”box”> Box One </div>
  <div id=”two” class =”box”> Box Two </div>
</html>
By default, the element with the id two would be displayed on top because it comes after element one in the code. However, if we wanted to display the first element on top we could use z-index, by giving each of the elements a numeric value for z-index and making sure that the value for element one is higher. The updated CSS could look like this:

#one {
  background: red;
  top: 100px;
  left: 150px;
  z-index:1;
}

#two {
  background: yellow;
  top: 80px;
  left: 100px;
  z-index: -1;
}
Notice that element one has been given a z-index value of 1, and element two has been given a z-index value of -1. If more elements were involved we could use a wider range of values and the same rules would apply-- so that an element with z-index 100 would be displayed above an element with a z-index value of 99, and below.





Absolute vs Relative Units
Many CSS properties require a unit of measurement. There’s a lot of units available, but the most common ones you’ll encounter are px (pixel) and em (pronounced like the letter m). The former is what you would intuitively call a pixel, regardless of whether the user has a retina display or not, and the latter is the current font size of the element in question.

There are broadly two types of units of measurement for CSS properties, absolute and relative.

Absolute

px
in
mm
cm
Absolute measurements are set values regardless of anything having to do with your program or the browser. px is the most common absolute unit of measurement, and many font sizes on the web for example, are set to somewhere between 12px-30px, A font size set to 16px will appear the same size no matter how big the screen. If however, you wanted to set a CSS property value based on some dynamic value, the width of a browser window for example, there are also relative units of measurement that can be used to define CSS properties.

Relative

% - percentage of something, such as screen width
em - A unit equivalent to the current font size - if 12px font, 2em would be 24px
vw - units of viewport width (essentially the browser’s rendering space). Each unit is 1/100th of width
vh - the same as above but for viewport height
The em unit is very useful for defining sizes relative to some base font. For example, if you set the font-size of body to 16px, you could then set other element’s font-size value relative to that 16px. Here’s what that could look like:

body {
 font-size: 16px;
}

#one {
  font-size: 1.5em
}

#two {
  font-size: 0.5em
}
In this example, one would have font bigger than 16px, and two would have font smaller than 16px.





TYPOGRAPHY

#typography{
	text-align: center;
	color: yellow;
	width: 64%;
	margin: auto;
	font-size: 1.4em;
	line-height: 1.5em;
}






Underlined Text
The text-decoration property determines whether text is underlined or not. By setting it to none, we can remove the default underline from all of our links. We’ll discuss link styles in-depth later on.

a {
  text-decoration: none;
}






Line Height
Just as alignment isn’t an arbitrary decision, neither is the space between text. In this section, we’re concerned with the responsible use of three CSS properties:

margin-top (or padding-top)
margin-bottom (or padding-bottom)
line-height
The first two should be pretty familiar by now, and they define the vertical space between separate paragraphs. The new line-height property determines the amount of space between lines in the same paragraph. In traditional typography, line-height is called “leading” because printers used little strips of lead to increase the space between lines of text.






Font Family
font-family is another built-in CSS property that defines the typeface for whatever element you selected. It accepts multiple values because not all users will have the same fonts installed.





Font Weight & Style
In CSS, font weights are expressed as numeric values between 100 and 900. Fortunately, there are relatively standardized, human-friendly terms for each of these numeric values. “Black” usually means 900, “bold” is 700, “regular” is 400, etc. Most families don’t supply a face for every single weight. For example, Roboto is missing “extra light” (200), “semi bold” (600), and “extra bold” (800).

It’s worth noting that each style and weight combination is designed as an entirely distinct face. In a high-quality font family, the condensed styles aren’t simply squashed versions of the roman faces, nor is the bold face merely a thicker version. Each letter in every face is hand-crafted to ensure it provides a uniform flow to its text.

This is particularly apparent in the italic and roman faces of many serif fonts. For instance, the lowercase “a” in Century Schoolbook FS (the font you’re reading right now) takes on a completely different shape when it’s italicized.





Emphasis & Importance
For emphasized (usually italics) words, use the <em> tag.

<p>
  We <em>have</em> to buy the latest version of the pet hair remover vacuum, the
  floor is covered with fur!
</p>

For important words, use the <strong> tag. By default, <strong> elements are displayed in bold, but keep in mind that it is only the browser’s default behavior. Don’t use <strong> only to put some text in bold, but rather to give it more importance.

<p>
  My dog is the most <strong>important</strong> creature in my life right now.
</p>






External Fonts
There are a number of ways to host fonts from external sources. One commonly used example is Google Fonts, which provides a great number of fonts free for use in web projects. If you go to the Google Fonts website linked below, you can select a font and then you will be provided with the line of code to link your font of choice. That link goes in the head section of your code like this:

<head>
  <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">
</head>
In the CSS portion of your code, you could then set an elements property like this:

.box{
  font-family: 'Montserrat', sans-serif;
}






Hexadecimal Colors
A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color. All values must be between 00 and FF.

For example, the #0000ff value is rendered as blue, because the blue component is set to its highest value (ff) and the others are set to 00.

Example
Define different HEX colors:

#p1 {
  background-color: #ff0000;
}

#p2 {
  background-color: #00ff00;
}

#p3 {
  background-color: #0000ff;
}






RGB Colors
An RGB color value is specified with the rgb() function, which has the following syntax:

rgb(red, green, blue)

Each parameter (red, green, and blue) defines the intensity of the color and can be an integer between 0 and 255 or a percentage value (from 0% to 100%).

For example, the rgb(0,0,255) value is rendered as blue, because the blue parameter is set to its highest value (255) and the others are set to 0.

Also, the following values define equal color: rgb(0,0,255) and rgb(0%,0%,100%).

Example
Define different RGB colors:

#p1 {
  background-color: rgb(255, 0, 0);
}

#p2 {
  background-color: rgb(0, 255, 0);
}

#p3 {
  background-color: rgb(0, 0, 255);
}















