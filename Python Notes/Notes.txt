LESSON 2: DATA TYPES AND OPERATORS
====================================================================================
1. ARITHMETIC OPERATORS

print()

	+ - addition
	- - subtraction
	* - multiplication
	/ - division
	** - exponentiation
	^ = notwose XOR
	& - Mod (remainder after dividing)
	// - integer division
	xey - x * (y*10)

2. VARIABLES AND ASSIGNMENT OPERATORS

	setting a variable:
		variable = value
		print(variable)
		variable1, variable2, variable3 = value1, value2, value3

		x = 2
			x += 2    x = x + 2
			x -= 2    x = x - 2


3. iNTEGERS AND FLOATS

	int - integer values
	float - decimal or floadting point values
	print(type(4)) >>> <class 'int'>
	print(int(49.7) >>> 49
	print(float(3520 + 3239)) >>> 6759.0
	print(.1 + .1 + .1 == .3) >>> false

4. BOOLEANS, COMPARISON OPERATORS, AND LOGICAL OPERATORS

	< - less than
	> - greater than
	<= - less than or equal to
	>= - greater than or equal to
	== - equal to
	!= - not equal to

	age = 14
	not_teen = age > 12 and age < 20
		print(not_teen) >:> true
	not_teen = not (age > 12 and age < 20)
		print(not_teen) >>> false

5. STRINGS

	print("hello") >>> hello
	print('hello') >>> hello
	string within string - \', \"

	first_word = "Hello"
	second_word = "There"
	print(first_word + second_word) >>> HelloThere
	print(first_word + " " + second_word) >>> Hello There
	first_word[0] >>> H
	first_word[1] >>> e	

	word = "Hello"
	print(word * 5) >>> HelloHelloHelloHello

	udacity_length = len("Udacity")
	print(udacity_length) >>> 7

	print(len("ababa") / len("ab")) >>> 2.5

6. TYPE AND TYPE CONVERSION

	house_number = 13
	street_name = "The Crescent"
	town_name = "Belmont"
	print(type(house_number)) >>> <class 'int'>
	
	address = str(house_number) + " " + street_name + ", " + town_name
	print(address) >>> 13 The Crescent, Belmont

	grams = "35.0"
	print(type(grams)) >>> <class 'str'>
	grams = float(grams)
	print(type(grams) >>> <class 'float'>

	DATA TYPES
		int
		float
		bool
		string

7. STRING METHODS

	.title()
		print("sebastian thrun".title()) >>> Sebastian Thrun

	.islower()
		full_name = "sebastian thrun"
		print(full_name.islower()) >>> True
	
	.count()
		print("One fish, two fish, red fish, blue fish.".count('fish')) >>> 4

	.find()
		print("sebastian thrum".find('a')) >>> 3
		print("sebastian thrum".rfind('a')) >>> 7

	.format()
		animal = "dog"
		action = "bite"
		print("Does your {} {}?".format(animal, action)) >>> Does your dog bite?

		maria_string = "Maria loves {} and {}"
		print(maria_string.format("math", "statistics")) >>> Maria loves math and statistics

	.split()
		new_str = "The cow jumped over the moon."
		new_str.split() >>> ['The', 'cow', 'jumped', 'over', 'the', 'moon.']
		new_str.split(' ', 3) >>> ['The', 'cow', 'jumped', 'over the moon.']
		new_str.split('.') >>> ['The cow jumped over the moon', '']
		new_str.split(None, 3) >>> ['The', 'cow', 'jumped', 'over the moon.']

	print("Verse has a length of {} characters.".format(len(verse)))
	print{verse, "\n") >>> breaks up lines
	print("The first occurence of the word 'and' occurs at the {}th index.".format{verse.find{'and')))
	

LESSON 3: DATA STRUCTURES
====================================================================================

1. LIST AND MEMBERSHIP OPEPRATORS

	LISTS - 
		DATA STRUCTURES, 
		ORDERED, 
		INDEX STARTING AT 0, 
		MUTABLE, 
		SORTABLE


	months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October,' 'November', 'December']
		print(months[0]) >>> January
		print(months[1]) >>> February
		print(months[7]) >>> August
		print(months[-1]) >>> December

		SLICE
		q3 = months[6:9]
		print(q3) >>> ['July', 'August', 'September']

	greeting = "Hello There"
	print('her' in greeting, 'her' not in greeting) >>> True False

	list_of_random_things = [1, 3.4, 'a string', True]
	print(list_of_random_things[1:2]) >>> [3.4]
	print(list_of_random_things[:2]) >>> [1, 3.4]
	print(list_of_random_things[1:]) >>> [3.4, 'a string', True]

	my_lst = [1, 2, 3, 4, 5]
	my_list[0] = 'one'
	print(my_lst) >>> ['one', 2, 3, 4, 5]

	month = 8

	days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]


	# use list indexing to determine the number of days in month


	num_days = days_in_month[month - 1]

	print(num_days) >>> 31


	eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',
                 '
			March 29, 2006', 'August 1, 2008', 'July 22, 2009',
                 
			'July 11, 2010', 'November 13, 2012', 'March 20, 2015',
                 
			'March 9, 2016']
                 
                 

	eclipse_dates = eclipse_dates[-3:]

	print(eclipse_dates) >>> ['November 13, 2012', 'March 20, 2015', 'March 9, 2016']

2. LIST METHODS

	list = [1, 4, 2, 3]
		print(max(list)) >>> 4
		print(sorted(list)) >>> [1, 2, 3, 4]
		print(sorted(list, reverse=True)) >>> [4, 3, 2, 1]
		print(min(list)) >>> 1
	list = ['word' 'a word' 'the word']
		print(max(list)) >>> word
	nautical_directions = "\n".join(["fore", "aft", "starboard", "port"])
		print(nautical_directions) >>>
			fore
			aft
			starboard
			port
	
	APPEND
	python_varieties = ['Burmese Python', 'African Rock Python', 'Ball Python', 'Reticulated Python', 'Angolan Python']
	python_varieties.append('Blood Python')
	print(python_varieties) >>> [list with, 'Blood Python']


7. TUPLES

	IMMUTABLE ORDERED SEQUENCES

	location = (13.4126, 103.866667)
	print("Latitude", location[0]) >>> Latitude13.4126
	print("Longitude", location[1]) >>> Longitude103.866667

	TUPLE UNPACKING
	dimensions = 52, 40, 100
	length, width, height - dimensions
	print("The dimensions are {} x {} x {}".format(length, width, height)) >>> The dimensions are 52 x 40 x 100	

8. SETS

	UNORDERED
	MUTABLE
	NO DUPLICATE ENTRIES

	countries = {'Angola', 'Maldives', 'India', 'United States', 'India', 'Denmark', 'Sweden', 'Ghana', *...777 countries not displayed*}
	country_set = set(countries)
		--sets don't have duplicate entries
	country_set.add("italy")	``
	set.pop() >>> removes random element from set

9. DICTIONARIES AND IDENTITY OPERATORS

	eleements = {'hydrogen' : 1, 'helium' : 2, 'carbon' : 6}
	elements['lithium'] = 3
	print(eleements) >>> {'hydrogen': 1, 'helium': 2, 'carbon': 6, 'lithium': 3}
	print('mithril' in elements) >>> False
	print(elements.get['dilithium']) >>> None
	print(elements.get('kryptonite', 'There\s No Such element!') >>> There's no Such element
	x = elements.get('dilithium')
	not_null = x is None 
	print(not_null) >>> True\

	animals = {'dogs': [20, 10, 15, 8, 32, 15], 
 
		'cats': [3,4,2,8,2,4], 
 'rabbits': [2, 3, 3], 

		'fish': [0.3, 0.5, 0.8, 0.3, 1]}
 
 
	animals['dogs'][3] >>> 8

10. COMPOUND DATA STRUCTURES

	elements {'hydrogen: {'number': 1, 'weight': 1.00794, 'symbol': 'H'},
		  'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}
	print(elements['helium']['weight']) >>> 4.00602

	ADDING TO COMPOUND DATA STRUCTURES

		elements['hydrogen']['is_noble_gas'] = False
		elementsp['helium']['is_noble_gas'] = True
		print(elements['hydrogen']['is_noble_gas']) >>> False


	LENGTH OF A SET
	len(set)

	IF A SET CONTAINS SOMETHING
	contains_word = "word" in set

	SORTING KEYS
	sorted_keys = sorted(set.keys())

	FIRST ELEMENT IN SORTED SET
	print(sorted_keys[0])

	HIGHEST VALUE IN LIST OF WORDS
	print(sorted_keys[-1])



DATA STRUCTURE	  ORDERED    MUTABLE    CONSTRUCTOR	EXAMPLE
LIST		  yes	     yes	[] OR list()    [5.7, 4, 'yes', 5.7]
TUPLE		  yes        no		() or tuple()   (5.7, 4, 'yes', 5.7)
SET		  no         yes	{} or set()**   {5.7, 4, 'yes'}
DICTIONARY	  no         no*	{} or dict()    {'Jun': 75, 'Jul': 89}

	*dictionary is mutable but each key must be immutable
	**You can use curly braces to define a set.  However if you leave
	  the curly braces empty, python will create an empty dictionary.
	  So to create an empty set, use set()

LESSON 4: CONTROL FLOW
=========================================================================

1. CONDITIONAL STATEMENTS

	phone_balance = 3
	bank_balance = 100
	print(phone_balance, bank_balance) >>> 3, 100
	if phone_balance < 5:
		phone_balance += 10
		bank_balance -= 10
	print(phone_balance, bank_balance) >>> 13, 90

	n = 15
	if n % 2 == 0:
		print("Number " + str(n) + " is even.")
	else:
		print("Number " + str(n) + " is odd.")
			>>> Number 15 is odd.


	season = "winter"
	if season == "spring":
		print("plant the garden!")
	elif season == "summer":
		print("water the garden!")
	elif season == "fall":
		print("harvest the garden!")
	elif season == "winter":
		print("stay indoors!")
	else:
		print("unrecognized season")
			>>> stay indoors!

	points = 174
	if points <= 50:
    		result = "Congratulations! You won a wooden rabbit!"
	elif points <= 150:
    		result = "Oh dear, no prize this time."
	elif points <= 180:
    		result = "Congratulations! You won a wafer-thin mint!"
	else:
    		result = "Congratulations! You won a penguin!"

	print(result) >>> Congratulations! You won a wafer thin mint!


2. BOOLEAN EXPRESSIONS FOR CONDITIONS

	if 18.5 <= weight / height**2 < 25:
    		print("BMI is considered 'normal'")

	if is_raining and is_sunny:
    		print("Is there a rainbow?")

	if (not unsubscribed) and (location == "USA" or location == "CAN"):
    		print("send email")
	
	TRUTH VALUE TESTING: CONSTANTS DEFINED TO BE false (and none)
		Zero of any numeric type: 0, 0.0, 0j, Decimal(0), Fraction(0,1)
		Empty sequences and collections " , (), [], {}, set(0), range(0)

	errors = 3
	if errors:
    		print("You have {} errors to fix!".format(errors))
	else:
    		print("No errors to fix!")
	>>> You have 3 errors to fix!

3. FOR LOOPS

	iTERABLE - OBJECT THAT CAN RETURN ONE OF ITS ELEMENTS AT A TIME - STRINGS, LISTS, TRUPLES, DICTIONARIES

	cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
	for city in cities:
		print(city.title())
		>>> New York City
		    Mountain View
		    Chicago
		    Los Angeles
	capitalized_cities = []
	for city in cities:
		capitalized_cities.append(city.title())

	RANGE - FUNCTION USED TO CREATE IMMUNTABLE SEQUENCES OF NUMBERS

	range(start, stop, step)
		start - start of range
		stop - one after last of range
		step - number of gaps between each iteration

	print(list(range(4))) >>> [0, 1, 2, 3]
	print(list(range(2, 6))) >>> [2, 3, 4, 5]
	print(list(range(1, 10, 2))) >>> 1, 3, 5, 7, 9

	cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
	for index in range(len(cities)):
		cities[index] = cities[index].title()
		print(cities) >>> ['New York City', 'Mountain View', 'Chicago', 'Los Angeles']

	for 1 in range(3):
		print("Hello!")

	sentence = ["This", "is", "a", "sentence."]
	for word in sentence:
		print(word)
		>>> This
		    is
		    a
		    sentence.
	
	for i in range(5, 35, 5):
		print(i)
		>>> 5
		    10
		    15
		    20
		    25
		    39


	element.replace("a", "b")

	names = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]
	
usernames = []


	for name in names:
    
		usernames.append(name.replace(" ", "_"))

	
print(usernames) >>> ['Joey_Tribbiani', 'Monica_Geller', 'Chandler_Bing', 'Phoebe_Buffay']

	for name in names:
    
		usernames.append(name.lower().replace(" ", "_"))
	

print(usernames) >>> ['joey_tribbiani', 'monica_geller', 'chandler_bing', 'phoebe_buffay']

	usernames = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]

	for i in range(len(usernames)):
    		usernames[i] = usernames[i].lower().replace(" ", "_")

	print(usernames) >>> ['joey_tribbiani', 'monica_geller', 'chandler_bing', 'phoebe_buffay']

	tokens = ['<greeting>', 'Hello World!', '</greeting>']

	count = 0
	

for token in tokens:
    
		if token[0] == '<' and token[-1] == '>':
        
			count += 1


	print(count) >>> 2

	items = ['first string', 'second string']

	html_str = "<ul>\n"  

	for item in items:
    
		html_str += "<li>{}</li>\n".format(item)
    
	
html_str += "</ul>"


	print(html_str) >>> <ul>
			    <li>first string</li>
			    <li>second string</li>
			    </ul>


	USING THE FOR LOOP TO CREATE A SET OF COUNTERS
	
	book_title =  ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']
	word_counter = {}
	for word in book_title:
    		if word not in word_counter:
        		word_counter[word] = 1
    		else:
        		word_counter[word] += 1
	print(word_counter) >>> {'great': 2, 'expectations': 1, 'the': 2, 'adventures': 2, 'of': 2, 'sherlock': 1, 'holmes': 1, 'gasby': 1, 'hamlet': 1, 'huckleberry': 1, 'fin': 1}

	USING THE GET METHOD

	book_title =  ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']
	word_counter = {}
	for word in book_title:
    		word_counter[word] = word_counter.get(word, 0) + 1


	cast = {
           "Jerry Seinfeld": "Jerry Seinfeld",
           "Julia Louis-Dreyfus": "Elaine Benes",
           "Jason Alexander": "George Costanza",
           "Michael Richards": "Cosmo Kramer"
        }
	for key in cast:
    		print(key)
	>>> Jerry Seinfeld
	    Julia Louis-Dreyfus
	    Jason Alexander
	    Michael Richards
	for key, value in cast.items():
		print("Actor: {}    Role: {}".format(key, value))
	>>> Actor: Jerry Seinfeld    Role: Jerry Seinfeld
	    Actor: Julia Louis-Dreyfus    Role: Elaine Benes
	    Actor: Jason Alexander    Role: George Costanza
	    Actor: Michael Richards    Role: Cosmo Kramer

	result = 0

	basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
	
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']
	for object, count in basket_items.items():
		if object in fruits:
			result += count
	print(result) >>> 23
	for object, count in basket_items.items():
	
		if object in fruits:
	    
			fruit_count += count
	
		else:
	    
			not_fruit_count += count
	    

	print(fruit_count, not_fruit_count) >>> 23 11

4. WHILE LOOPS

	card_deck = [4, 11, 8, 5, 13, 2, 8, 10]
	hand = []

	while sum(hand) <= 17:
		hand.append(card_deck.pop())
		print(sum(hand))
	print(hand) >>> 10
			18
			[10, 8]

	number = 6
	product = 1
	current = 1
	while current <= number:
		product *= current
		current += 1
	print(product) >>> 720

	number = 6
	product = 1
	for num in range(2, number + 1):
		product *= num
	print(product) >>> 720

	limit = 40
	num = 0
	while (num+1)**2 < limit:
		num += 1
`	nearest_square = num**2
	print(nearest_square) >>> 36

	num_list = [422, 136, 524, 85, 96, 719, 85, 
	            92, 10, 17, 312, 542, 87, 23, 86, 191, 116, 
		    35, 173, 45, 149, 59, 84, 69, 113, 166]
	count_odd = 0
	
list_sum = 0
	
i = 0

	len_num_list = len(num_list)


	while (count_odd < 5) and (i < len_num_list):
    
		if num_list[i] % 2 != 0:
        
			list_sum += num_list[i]
        
			count_odd += 1
    
		i += 1
	print(list_sum) >>> 993
	
print(count_odd) >>> 5

5. BREAK, CONTINUE

	manifest = [("bananas", 15), ("mattresses", 34), ("dog kennels", 42), 
		    ("machine", 120), ("cheeses", 5)]
	weight = 0
	items = []
	for cargo in manifest:
		if weight >= 100:
			break
		else:
			items.append(cargo[0])
			weight += cargo[1]


	weight = 0
	
items = []

	for cargo_name, cargo_weight in manifest:
    
		print("current weight: {}".format(weight))
    
		if weight >= 100:
        
			print("  breaking from the loop now!")
        
			break
    
		elif weight + cargo_weight > 100:
        
			print("  skipping {} ({})".format(cargo_name, cargo_weight))
        
			continue
    
		else:
        
			print("  adding {} ({})".format(cargo_name, cargo_weight))
        
			items.append(cargo_name)
        
			weight += cargo_weight


		print("\nFinal Weight: {}".format(weight))

		print("Final Items: {}".format(items))
		>>>
		current weight: 0
		  adding bananas (15)
		current weight: 15
		  adding mattresses (24)
		current weight: 39
		  adding dog kennels (42)
		current weight: 81
		  skipping machine (120)
		current weight: 81
		  adding cheeses (5)

		Final Weight: 86
		Final Items: ['bananas', 'mattresses', 'dog kennels', 'cheeses']



	fruit = ["orange", "strawberry", "apple"]
	food = ["apple", "apple", "hummus", "toast"]
	fruit_count = 0
	for food in foods:
		if food not in fruit:
			print("Not a fruit")
	`		continue
		fruit_count += 1
		print("found a fruit!")
	print("Total fruit: ", fruit_count) >>>
		Found a fruit!
		Found a fruit!
		Not a fruit
		Not a fruit
		Total fruit: 2


	headlines = ["Local Bear Eaten by Man",
             "Legislature Announces New Laws",
             "Peasant Discovers Violence Inherent in System",
             "Cat Rescues Fireman Stuck in Tree",
             "Brave Knight Runs Away",
             "Papperbok Review: Totally Triffic"]

	news_ticker = ""
	for headline in headlines:
    		news_ticker += headline + " "
    		if len(news_ticker) >= 140:
        		news_ticker = news_ticker[:140]
        		break

	print(news_ticker) >>> Local Bear Eaten by Man Legislature Announces 
				New Laws Peasant Discovers Violence Inherent 
				in System Cat Rescues Fireman Stuck in Tree Brave

	check_prime = [26, 39, 51, 53, 57, 79, 85]
	for num in check_prime:
		for i in range(2, num):
			if (num % i) == 0:
				print("{} is NOT a prime number, because {} is a factor of {}".format(num, i, num))
				break
			if i == num -1:
				print("{} IS a prime number".format{num))

6. ZIP AND ENUMERATE

	items = ['bananas', 'mattresses', 'dog kennels', 'machine', 'cheeses']
	weights = [15, 34, 42, 120, 5]

	print(list(zip(items, weighhts))) >>>

	for item, weight in zip(items, weights):
		print(item, weight) >>>

		[('bananas', 15), ('mattresses', 24), ('dog kennels', 42),
		 ('machine', 120), ('cheeses', 5)]

	UNZIP:
	`	items, weights = zip(*manifest)

	items = ['bananas', 'mattresses', 'dog kennels', 'machine', 'cheeses']

	for i, item in zip(range(len(items)), items)
		print(i, item) >>>
	for i, item in enumerate(items):
		print(i, item) >>>

		0 bananas
		1 mattresses
		2 dog kennels
		3 machine
		4 cheeses


	x_coord = [23, 53, 2, -12, 95, 103, 14, -5]

	y_coord = [677, 233, 405, 433, 905, 376, 432, 445]

	z_coord = [4, 16, -6, -42, 3, -6, 23, -1]

	labels = ["F", "J", "A", "Q", "Y", "B", "W", "X"]


	points = []


	for point in zip(labels, x_coord, y_coord, z_coord):
    
		points.append("{}: {}, {}, {}".format(*point))
	for point in points:
    
	print(point) >>>
		F: 23, 677, 4
		J: 53, 233, 16
		A: 2, 405, -6
		Q: -12, 433, -42
		Y: 95, 905, 3
		B: 103, 376, -6
		W: 14, 432, 23
		X: -5, 445, -1

	cast_names = ["Barney", "Robin", "Ted", "Lily", "Marshall"]

	cast_heights = [72, 68, 72, 66, 76]


	cast = dict(zip(cast_names, cast_heights))

	print(cast) >>>
		{'Ted': 72, 'Marshall': 76, 'Lily': 66, 'Barney': 72, 'Robin': 68}

	cast = (("Barney", 72), ("Robin", 68), ("Ted", 72), ("Lily", 66), ("Marshall", 76))


	names, heights = zip(*cast)


	print(names)

	print(heights) ??? 
		('Barney', 'Robin', 'Ted', 'Lily', 'Marshall')	
		(72, 68, 72, 66, 76)


	data = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11))


	data_transpose = tuple(zip(*data))

	print(data_transpose) >>> 
		((0, 3, 6, 9), (1, 4, 7, 10), (2, 5, 8, 11))

	cast = ["Barney Stinson", "Robin Scherbatsky", "Ted Mosby", "Lily Aldrin", "Marshall Eriksen"]
	heights = [72, 68, 72, 66, 76]


	for i, character in enumerate(cast):
    
		cast[i] = character + " " + str(heights[i])
	print(cast) >>>
		['Barney Stinson 72', 'Robin Scherbatsky 68', 
		 'Ted Mosby 72', 'Lily Aldrin 66', 'Marshall Eriksen 76']	

	cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
	capitalized_cities = [city.title() for city in cities]

	squares = [x**2 for x in range(9) if x % 2 == 0]
	print(squares) >>>
		[0, 4, 16, 36, 64]

	names = ["Rick Sanchez", "Morty Smith", "Summer Smith", "Jerry Smith", "Beth Smith"]


	first_names = [name.split()[0].lower() for name in names]

	print(first_names) >>>
		['rick', 'morty', 'summer', 'jerry', 'beth']

	multiples_3 = [x * 3 for x in range(1, 21)]

	print(multiples_3) >>>
		[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]

	scores = {
"Rick Sanchez": 70,
  "Morty Smith": 35,
 "Summer Smith": 82,
 "Jerry Smith": 23,
 "Beth Smith": 98
}


	passed = [name for name, score in scores.items() if score >= 65]

	print(passed)
	['Summer Smith', 'Rick Sanchez', 'Beth Smith']

	nominated = [year: [director1, director2, director3, director4]]
	winners = [year: [director]]
	nom_count_dict = []
	for year, lis_dir in nominated.items():
		for director in lis_dir:
			if director not in nom_count_dict:
				nom_count_dict[director] = 1
			else:
				nom_count_dict[director += 1

	CLEAR:
		most_win_director.clear()

	winners = {year: ['winner'}, year: ['winner'], year: ['winner']}
	most_win_director = []
	win_count_dict = {}
		for winner, winnerlist in winners.items():
			for winner in winnerlist:
				win_count_dict[winner] = win_count_dict.get(winner, 0) +1
	highest_count = 0\
	for key, value in win_count_dict.items():
		if value > highest_count:
			highest_count = value
			most_win_director.clear()
			most_win_director.append(key)
		elif value == highest_count:
			most_win_director.append(key)
		else:
			continue
	OR
	highest_count = max(win_count_dict.values())
	most_win_director = [key for key, value in win_count_dict.items() if value == highest_count]


LESSON 5: FUNCTIONS
=================================================================================================

1. DEFINING FUNCTIONS

	def cylinder_volume(height, radius):
		pi - 3.14158
		return height * pi * radius ** 2

	cylinder_volume(10, 3) >>> 282.7431

	DEFAULT ARGUMENTS
		def dylinder_volume(height, radius=5)

	def population_density(population, area):
    
		return population / area


	test1 = population_density(10, 1)

	expected_result1 = 10

	print("expected result: {}, actual result: {}".format(expected_result1, test1)) 
		>>> expected result: 10, actual result: 10




	def readable_timedelta(day):
    
		weeks = day // 7
    
		days = day % 7
    
		return "{} week(s) and {} day(s).".format(weeks, days)



	
print(readable_timedelta(1)) >>> 0 week(s) and 1 day(s)
	print(readable_timedelta(1)) >>> 1 week(s) and 3 day(s)

2. VARIABLE SCOPE

	egg_count = 0
	def buy_eggs(count):
	    return count + 12  # purchase a dozen eggs
	egg_count = buy_eggs(egg_count)

	str1 = 'Functions are important programming concepts.'
	def print_fn():
	    str1 = 'Variable scope is an important concept.'
	    print(str1)
	print_fn() >>> 'Variable scope is an important concept.'

3. DOCUMENTATION

	DOCSTRING - A TYPE OF COMMENT USED TO EXPLAIN THE PURPOOSE OF A FUNCTION
		    AND HOW IT SHOULD BE USED

		Defined with """ """

4. LAMBDA EXPRESSIONS - EXPRESSION USED TO CREATE AN ANONYMOUS FUNCTION

	double = lambda x: x * 2
	double(3) >>> 6

	lambda x, y: x * y

	map() is a higher-order built-in function that takes a function and 
	iterable as inputs, and returns an iterator that applies the function 
	to each element of the iterable. 

	numbers = [
[34, 63, 88, 71, 29],
 [90, 78, 51, 27, 45],
 [63, 37, 85, 46, 22],
 [51, 22, 34, 11, 18]
]


	def mean(num_list):
    
		return sum(num_list) / len(num_list)


	averages = list(map(mean, numbers))

	print(averages) >>> [57.0, 58.2, 50.6, 27.2]
	averages = list(map(lambda x: sum(x) / len(x), numbers))

	print(averages) >>> [57.0, 58.2, 50.6, 27.2]

	filter() is a higher-order built-in function that takes a function 
	and iterable as inputs and returns an iterator with the elements 
	from the iterable for which the function returns True. 

	cities = ["New York City", "Los Angeles", "Chicago", "Mountain View", "Denver", "Boston"]
	def is_short(name):
    
		return len(name) < 10



	short_cities = list(filter(lambda x: len(x) < 10, cities))
	
print(short_cities) >>> ['Chicago', 'Denver', 'Boston']

LESSON 6: SCRIPTING
=================================================================================

1. SCRIPTING WITH RAW INPUT

	name = input("Enter your name: ")
	print("Hello there {}!".format(name.title()))

	num = int(input("Enter an integer"))
	print("Hello" * num)

	eval - This function evaluates a string as a line of Python.

names = input("Enter names seperated by commas: ".title().split(",")
assignments = input("Enter assignments seperated by commas: ".split(",")
grades = input("Enter grades seperated by commas: ".split(",")

message = "Hi {},\n\nThis is a reminder that you have {} assignments left to \
submit before you can graduate. You're current grade is {} and can increase \
to {} if you submit all assignments before the due date.\n\n"

for name, assignment, grade in zip(names, assignments, grades):
	print(message.format(name, assignment, grade, int(grade) + int(assignment)*2))

2. ERRPRS AND EXCEPTIONS / HANDLING ERRORS

	while True:
		try:
			x = int(input("Enter a number: "))
			break
		except ValueError:
			print("That's not a valid number!")
		except KeyboardInterrupt:
			print("\nNo Input taken")
			break
		finally:
			print("\nAttempted Input\n")

	try: This is the only mandatory clause in a try statement. The code 
	in this block is the first thing that Python runs in a try statement.

	except: If Python runs into an exception while running the try block, 
	it will jump to the except block that handles that exception.

	else: If Python runs into no exceptions while running the try block, 
	it will run the code in this block after running the try block.

	finally: Before Python leaves this try statement, it will run the code in 
	this finally block under any conditions, even if it's ending the program. 
	E.g., if Python ran into an error while running code in the except or else 
	block, this finally block will still be executed before stopping the program.
	

	def party_planner(cookies, people):
		leftovers = None
		num_each = None	
		try:
			num_each = cookies // people
			leftovers = cookies % people
		except ZeroDivisionError:
			print("There are no people at your party")
		return(num_each, leftovers)
	lets_party = 'y'
	while lets_party ++ 'y':
		cookies = int(input("How many cookies are you baking? "))
		people = int(input("How many people are attending? "))
		cookies_each, leftovers = party_planner(cookies, people)
		if cookies_each:
			message = "\nLet's Party! We'll have {} people attending,
				   they'll each get to eat {} cookies, and we'll
				   have {} left over."
			print(message.format(people, cookies_each, leftovers))
		lets_party = input("Would you like to party more? (y or n) ")

3. READING AND WRITING FILES

	f = open('/my_path/my_file.txt', 'r')
	file_data = f.read()
	f.close()
	print(

	f = open('some_file.txt', 'w')
		>>> write mode, creates the file
	f.write('Hello World!')
	f.close()

	f = open('some_file.txt', 'a')
		>>> append mode

	with open('my_path/my_file.txt', 'r') as f:
		file_data = f.read()

	camelot_lines = []
	with open("camelot.txt") as f:
		for line in f:
			camelot_lines.append(line.strip())
	print(camelot_lines) >>>
		["We're the knights of the round table", "We dance whenever we're able"]

	def create_cast_list(filename):
		cast_list = []
		with open(filename) as f
			for line in f:
				name = line.split(',')[0]
				cast_list.append(name)
		return cast_list
	cast_list = create_cast_list('flying_circus_cast.txt')
	for actor in cast_list:
		print(actor)

	user_list = []
	list_sum = 0
	for i in range(10):
		userInput = int(input("Enter any number: "))
		try:
			user_list.append(userInput)
			if userInput % 2 == 0:
				list_sum += userInput
		except ValueError:
			print("Incorrect value. That's not an int!")
	print("user list: {}".format(user_list))
	print("The sum of the even numbers in user_list is: {}".format(list_sum))

4. IMPORTING LOCAL SCRIPTS

	import other_script
	print(other_Script.variable_in_other_script)

	ALIAS	
		import useful_functions as uf
		mean = uf.mean(scores)

	if __name__ == '__main__':
		only executes if file is main file

	__name__ name of the file
	__main__ assigned to the file you're working on

	def mean(num_list):
	    return sum(num_list) / len(num_list)
	def add_five(num_list):
	    return [n + 5 for n in num_list]
	def main():
	    print("Testing mean function")
	    n_list = [34, 44, 23, 46, 12, 24]
	    correct_mean = 30.5
	    assert(mean(n_list) == correct_mean)
	    print("Testing add_five function")
	    correct_list = [39, 49, 28, 51, 17, 29]
	    assert(add_five(n_list) == correct_list)
	    print("All tests passed!")
	if __name__ == '__main__':
	    main()

5. THE STANDARD LIBRARY

	RANDOM DIE ROLL:
	roll = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
	import random
	def roll_dice():
	    return random.choice(roll)
	result = roll_dice()
	result2 = roll_dice()
	print(result)
	print(result2)
	print(roll_dice())

	MODULES:
	csv: very convenient for reading and writing csv files
	collections: useful extensions of the usual data types including 
		     OrderedDict, defaultdict and namedtuple
	random: generates pseudo-random numbers, shuffles sequences randomly 
		and chooses random items
	string: more functions on strings. This module also contains useful 
		collections of letters like string.digits (a string containing 
		all characters which are valid digits).
	re: pattern-matching in strings via regular expressions
	math: some standard mathematical functions
	os: interacting with operating systems
	os.path: submodule of os for manipulating path names
	sys: work directly with the Python interpreter
	json: good for reading and writing json files (good for web work)
	datetime: current time and date
	os.path: changing current working directory
	csv: read data from comma separated values (.csv) file into python
	     dictionaries for each row
	zipfile: extract all of the files from a zip file
	timeit: how long code took to run

	word file = "words.txt"
	word_list = []
	with open(word_file, 'r') as words:
		for line in words:
			word = line.strip().lower()
			if 3 < len(word) < 8:
				word_list.append(word)
	import random
	def generate_password():
		return random.choice(word_list) + random.choice(word_list) + random.choice(word_list)
	print(generate_password())

6. TECHNIQUES FOR IMPORTING MODULES
	
	IMPORTING INDIVIDUAL FUNCTION OR CLASS FROM A MODULE:
		from collections import defaultdict, namedtuple
		from csv import reader as scvreader
	IMPORTING SUBMODULES	
		import package_name.submodule_name

	USEFUL THIRD PARTY PACKAGES
	IPython - A better interactive Python interpreter
	requests - Provides easy to use methods to make web requests. Useful for accessing web APIs.
	Flask - a lightweight framework for making web applications and APIs.
	Django - A more featureful framework for making web applications. Django is particularly 
		 good for designing complex, content heavy, web applications.
	Beautiful Soup - Used to parse HTML and extract information from it. Great for web scraping.
	pytest - extends Python's builtin assertions and unittest module.
	PyYAML - For reading and writing YAML files.
	NumPy - The fundamental package for scientific computing with Python. It contains among 
		other things a powerful N-dimensional array object and useful linear algebra 
		capabilities.
	pandas - A library containing high-performance, data structures and data analysis tools. 
		 In particular, pandas provides dataframes!
	matplotlib - a 2D plotting library which produces publication quality figures in a variety 
		     of hardcopy formats and interactive environments.
	ggplot - Another 2D plotting library, based on R's ggplot2 library.
	Pillow - The Python Imaging Library adds image processing capabilities to your Python 
		 interpreter.
	pyglet - A cross-platform application framework intended for game development.
	Pygame - A set of Python modules designed for writing games.
	pytz - World Timezone Definitions for Python


	def create_flowerdict(filename):
	    flower_dict = {}
	    with open(filename) as f:
	        for line in f:
	            letter = line.split(": ")[0].lower()
	            flower = line.split(": ")[1].strip()
	            flower_dict[letter] = flowers
	    return flower_dict
	def main():
	    flower_d = create_flowerdict("flowers.txt")
	    full_name = input("Enter your first [space] last name only: ")
	    first_name = full_name[0].lower()
	    first_letter = first_name[0]
	    print("Unique flower name with the first letter: {}".format(flower_d[first_letter]))
	main()	

LESSON 7: ADVANCED TOPICS

lessons = ["Why Python Programming", "Data Types and Operators", "Control Flow", "Functions", "Scripting"]

	def my_enumerate(iterable, start=0):
	    count = start
	    for element in iterable:
	        yield count, element
	        count += 1
	for i, lesson in my_enumerate(lessons, 1):
	    print("Lesson {}: {}".format(i, lesson))
		>>>
			Lesson 1: Why Python Programming
			Lesson 2: Data Types and Operators
			Lesson 3: Control Flow
			Lesson 4: Functions
			Lesson 5: Scripting

	def chunker(iterable, size):
	    for i in range(0, len(iterable), size):	
	        yield iterable(i:i + 4)
	for chunk in chunker(range(25), 4)
	    print(list(chunk)) >>> 
				[0, 1, 2, 3]
				[4, 5, 6, 7]
				[8, 9, 10, 11]
				[12, 13, 14, 15]
				[16, 17, 18, 19]
				[20, 21, 22, 23]
				[24]


CREATING A LIST:

	cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
	capitalized_cities = []
	for city in cities:
		capitalized_cities.append(city.titles())


MODIFYING A LIST:

	for index in range(len(cities)):
		cities[index] = cities[index].title()

CREATING A DICTIONARY

	book_title =  ['great', 'expectations','the', 'adventures', 'of', 
		      'sherlock','holmes','the','great','gasby','hamlet',
		      'adventures','of','huckleberry','fin']
	word_counter = {}
	for word in book_title:
		if word not in word_counter:
			word_counter[word] = 1
		else:
			word_counter[word] += 1
	for word in book_title:
		word_counter[word] = word_counter.get(word, 0) + 1

ITERATING THROUGH DICTIONARIES WITH FOR LOOPS:

c	ast = {
 	          "Jerry Seinfeld": "Jerry Seinfeld",
 	          "Julia Louis-Dreyfus": "Elaine Benes",
 	          "Jason Alexander": "George Costanza",
 	          "Michael Richards": "Cosmo Kramer"
 	      }
	for key, value in cast.items():
		print("Actor: {}  Role: {}".format(key, value))

RETURN LAST ITEM FROM A LIST

	list.pop()

RETURN SUM NOF ELEMENTS OF A LIST

	sum(list)

LOOPING FOR A SET NUMBER OF TIMES:

	CURRENT = 1
	NUMBER = 6
	while current <= number
		current += 1

	number = 6
	for num in range(1, number + 1)

COUNTING BY A NUMBER

	start_num = 2
	end_num = 10
	count_by = 2
	break_num = 0

	while break_num < end_num
		break_num += count_by
		print(break_num)		`		
			>>>
			2
			4
		`	6
			8
			10

for loops are ideal when the number of iterations is known or finite.

	Examples:

	When you have an iterable collection (list, string, set, tuple, dictionary)
		for name in names:
	When you want to iterate through a loop for a definite number of times, using range()
		for i in range(5):

while loops are ideal when the iterations need to continue until a condition is met.

	Examples:

	When you want to use comparison operators
		while count <= 100:
	When you want to loop based on receiving specific user input.
		while user_input == 'y':

COMBINING ELEMENTS FROM TWO LISTS

	for cargo in zip(items, weights):
		print(cargo[0], cargo[1])
		>>> [("cargo1", weight1), ("cargo2", weight2)]

UNPACKING TUPLES:

	items, weights = zip(*manifest)

ZIPPING A LIST TO A DICTIONARY

	`cast = dict(zip(cast)names, cast_heights))

GROUPING TWO CORRESPONDING LISTS TOGETHER:

	cast = ["Barney Stinson", "Robin Scherbatsky", "Ted Mosby", "Lily Aldrin", "Marshall Eriksen"]

	heights = [72, 68, 72, 66, 76]


	for i, character in enumerate(cast):
    
		cast[i] = character + " " + str(heights[i])



	print(cast)

SPLITTING ITEMS IN A LIST AND CREATING A NEW LIST OF THEM:

	names = ["Rick Sanchez", "Morty Smith", "Summer Smith", "Jerry Smith", "Beth Smith"]


	first_names = [name.split()[0].lower() for name in names]

	print(first_names)

CREATING A LIST FOR MATH

	multiples_3 = [x * 3 for x in range(1, 21)]

	print(multiples_3)

FILTERING ITEMS FROM A DICTIONARY AND CREATING A LIST OF THEM

	scores = {
"Rick Sanchez": 70,
 "Morty Smith": 35,
 "Summer Smith": 82,
 
		  "Jerry Smith": 23,
 "Beth Smith": 98
}


	passed = [name for name, score in scores.items() if score >= 65]

	print(passed)

protecting from errors

	while true:
		try:
			x = int(input("Enter a number: ")):
			break
		except:
			print("THat\'s not a valid number")
		finally:
			print("\nAttempted Input\n")


OPENING AND READING A FILE:

	f = open('some_file.txt', 'r')
	file_data = f.read()
	f.close()

	WRITE MODE:
	f = open('my_file.txt', 'w')

	AUTO CLOSE FILE:
	with open('another_file.txt', 'r') as f:
		file_data = f.read()

CREATING A LIST FROM EACH LINE OF A FILE:

	camelot_lines = []
	with open("camelot.txt.") as f:
		for line in f:
			camelot_lines.append(line.strip())

IMPORTING OTHER SCRIPT

	import userful_functions as uf

	ACCESSING A VARIABLE FROM ANOTHER SCRIPT:
		print(other_script.num)


MAKING SURE CODE ONLY RUNS INSIDE THE MAIN FILE:

	if __name__ == '__main__':


PICKING RANDOM ITEM FROM A LIST:

	import random
	def generate_password()
		return random.choice(word_list) + random.choice(word_list)


IMPORTING DATE TIME MODULE

	from datetime import datetime

INSTALLING PACKAGES

	pip install ____

