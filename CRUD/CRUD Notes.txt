CREATING A COLUMN:

	columnName = Column(attributes, ...)

	attributes:
		String(250)
		Integer
		relationship(Class)
		nullable = False
		primary_key = True
		ForeignKey('some_table.id')

CALLING FROM A DATABASE:

	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker
	from database_setup import Base, Restaurant, MenuItem
	
	engine = create_engine('sqlite:///restaurantmenu.db')
	Base.metadata.bind = engine
	DBSession = sessionmaker(bind = engine)
	session = DBSession()

	items = session.query(MenuItem).all()
	for item in items:
		print(item.name)

ADDING TO A DATABASE:

	cheesepizza = MenuItem(name = "CheesePizza", 
		description = "Made with all natural ingredients and fresh mozzarella",
		course = "Entree", price = "$8.99", restaurant = myFirstRestaurant)
	session.add(cheesepizza)
	session.commit()

FILTERING BY NAME:

	veggieBurgers = session.query(MenuItem).filter_by(name = 'Veggie Burger')
	for veggieBurger in veggieBurgers:
		print veggieBurger.id
		print veggieBurger.price
		print veggieBurger.restaurant.name

UPDATING A DATABASE

	UrbanVeggieBurger = session.query(MenuItem).filter_by(id = 43).one()
	UrbanVeggieBurger.price = '$2.99'
	session.add(UrbanVeggieBurger)
	session.commit()

	rebecca = session.query(Employee).filter_by(name = "Rebecca Allen").one()
	RebeccasAddress = session.query(Address).filter_by(employee_id = rebecca.id).one()
	RebeccasAddress.street = "281 Summer Circle"
	RebeccasAddress.zip = "00189"
	session.add(RebeccasAddress)
	session.commit()

UPDATING MULTIPLE ENTRIES IN A DATABASE:

	for veggieBurger in veggieBurgers:
		if veggieBurger.price != '$2.99':
			veggieBurger.price = '$2.99'
			session.add(veggieBurger)
			session.commit()

DELETE AN ITEM FROM THE DATABASE:

	spinach = session.query(MenuItem).filter_by(name = 'Spinach Ice Cream').one()
	session.delete(spinach)
	session.commit()

	
URL ROUTING:

project.py
	from flask import Flask, render_template
	app = Flask(__name__)

	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker
	from database_setup import Base, Restaurant, MenuItem
	
	engine = create_engine('sqlite:///restaurantmenu.db')
	Base.metadata.bind = engine
	DBSession = sessionmaker(bind = engine)
	session = DBSession()

	@app.route('/')
	@app.route('/restaurants/<int:restaurant_id>/')
	def restaurantMenu(restaurant_id):
		restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()
		items = session.query(MenuItem).filter_by(restaurant_id=restaurant_id)
		return render_template('menu.html', restaurant=restaurant, items = items)

	@app.route('/restaurants/edit/<int:restaurant_id>/<int:menu_id>/')
	def editMenuItem(restaurant_id, menu_id):
	    return "page to edit a menu item. Task 2 complete!"


menu.html

	<p>
	<a href="{{url_for('editMenuItem', restaurant_id = restaurant.id, menu_id=i.id ) }}">Edit</a>
	</p>
	<p>
	<a href="{{url_for('deleteMenuItem', restaurant_id = restaurant.id, menu_id=i.id)}}">Delete</a>
	</p>

URL ROUTING FOR POSTS:

project.py

	from flask import Flask, render_template, request, redirect, url_for
	app = Flask(__name__)

	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker
	from database_setup import Base, Restaurant, MenuItem
	
	engine = create_engine('sqlite:///restaurantmenu.db')
	Base.metadata.bind = engine
	DBSession = sessionmaker(bind = engine)
	session = DBSession()

	@app.route('/restaurants/<int:restaurant_id>/new/', methods=['GET', 'POST'])
	def newMenuItem(restaurant_id):
	    if request.method == 'POST':
	    	newItem = MenuItem(name = request.form['name'],restaurant_id = restaurant_id)
	    	session.add(newItem)
	    	session.commit()
	    	return redirect(url_for('restaurantMenu', restaurant_id = restaurant_id))
	    else:
	    	return render_template('newmenuitem.html', restaurant_id = restaurant_id)

newmenuitem.py

	<form action="{{url_for('newMenuItem', restaurant_id = restaurant_id)}}" method = 'POST'>
		<p>Name</p>
			<input type="text" size='30' name="name">
		<input type="submit" value="Create">
	</form>

EDITING ITEMS WITH A TEMPLATE:

project.py

	from flask import Flask, render_template, request, redirect, url_for
	app = Flask(__name__)
	
	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker
	from database_setup import Base, Restaurant, MenuItem
	
	engine = create_engine('sqlite:///restaurantmenu.db?check_same_thread=False')
	Base.metadata.bind = engine
	DBSession = sessionmaker(bind = engine)
	session = DBSession()

	@app.route('/restaurants/<int:restaurant_id>/<int:menu_id>/edit/', methods =['GET', 'POST'])
	def editMenuItem(restaurant_id, menu_id):
	    editedItem = session.query(MenuItem).filter_by(id=menu_id).one()
	    if request.method == 'POST':
	        if request.form['name']:
	            editedItem.name = request.form['name']
	            session.add(editedItem)
	            session.commit()
	        return redirect(url_for('restaurantMenu', restaurant_id = restaurant_id))
	    else:
	        return render_template('editmenuitem.html', restaurant_id = restaurant_id, menu_id = menu_id, i = editedItem)



editmenuitem.html

	<form action="{{url_for('editMenuItem', menu_id = menu_id, restaurant_id = restaurant_id)}}" method = 'POST'>
		<p>Name</p>
			<input type="text" size='30' name="name" placeholder="{{i.name}}">
		<input type="submit" value="Edit">
	</form>
	<a href="{{url_for('restaurantMenu', restaurant_id = i.restaurant_id)}}">Cancel</a>


DELETE AN ITEM WITH URL ROUTING AND TEMPLATES:

project.py:

	from flask import Flask, render_template, request, redirect, url_for
	app = Flask(__name__)

	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker
	from database_setup import Base, Restaurant, MenuItem
	
	engine = create_engine('sqlite:///restaurantmenu.db?check_same_thread=False')
	Base.metadata.bind = engine
	DBSession = sessionmaker(bind = engine)
	session = DBSession()

	@app.route('/restaurants/delete/<int:restaurant_id>/<int:menu_id>/', methods =['GET', 'POST'])
	def deleteMenuItem(restaurant_id, menu_id):
	    deleteItem = session.query(MenuItem).filter_by(id = menu_id).one()
	    if request.method == 'POST':
	        session.delete(deleteItem)
	        session.commit()
	        return redirect(url_for('restaurantMenu', restaurant_id = restaurant_id))
	    else:
	        return render_template('deletemenuitem.html', item = deleteItem)

deletemenuitem.html:

	<form action="{{ url_for('deleteMenuItem',restaurant_id = item.restaurant_id, menu_id=item.id)}}" method = 'post'>
	<input type='submit', value = 'Delete'>
	</form>
	<a href = "url_for{{('restaurantMenu', restaurant_id = restaurant_id')}}"> Cancel </a>
	</body>

FLASH A MESSAGE

project.py

	from flask import Flask, render_template, request, redirect, url_for, flash

	@app.route('/restaurants/<int:restaurant_id>/new/', methods=['GET', 'POST'])
	def newMenuItem(restaurant_id):
	    if request.method == 'POST':
	        newItem = MenuItem(name = request.form['name'],restaurant_id = restaurant_id)
	        session.add(newItem)
	        session.commit()
	        flash("New Menu Item Created")
	        return redirect(url_for('restaurantMenu', restaurant_id = restaurant_id))
	    else:
	        return render_template('newmenuitem.html', restaurant_id = restaurant_id)

	if __name__ == '__main__':
	    app.secret_key = 'super_secret_key'
	    app.debug = True
	    app.run(host = '0.0.0.0', port = 5000)

menu.html

	<h1>{{restaurant.name}}</h1>
		{% with messages = get_flashed_messages() %}
	{% if messages %}
		<ul>
		{% for message in messages %}
			<li><strong> {{ message }} </strong></li>
		{% endfor %}
		</ul>
		{% endif %}
	{% endwith %}

JSONIFY:

project.py

	from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
	app = Flask(__name__)
		
	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker
	from database_setup import Base, Restaurant, MenuItem
	
	engine = create_engine('sqlite:///restaurantmenu.db?check_same_thread=False')
	Base.metadata.bind = engine
	DBSession = sessionmaker(bind = engine)
	session = DBSession()

	@app.route('/restaurants/<int:restaurant_id>/menu/JSON/')
	def restaurantMenuJSON(restaurant_id):
	    restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()
	    items = session.query(MenuItem).filter_by(restaurant_id=restaurant_id)
	    return jsonify(MenuItem=[i.serialize for i in items])

	@app.route('/restaurants/<int:restaurant_id>/menu/<int:menu_id>/JSON/')
	def menuItemJSON(restaurant_id, menu_id):
	    item = session.query(MenuItem).filter_by(id=menu_id).one()
 	   return jsonify(MenuItem= item.serialize)