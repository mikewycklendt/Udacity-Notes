https://github.com/mikewycklendt/fend-webpack-sass

Nesting is one of the key features of Sass. HTML elements are nested, and so CSS is nested by nature, but that isn't reflected in CSS syntax. Sass allows you to write styles for nested elements in a much more intuitive way. Writing nested sass can mean that you don't have to create nearly as many individual classes, which can save a lot of time and markup. Not only that, but you are much more likely to be able to edit styles by only touching the CSS file, without having to go back and forth between the HTML and CSS. As a rule of thumb though, if you find yourself nesting more than three levels deep, it’s probably time for a new class.

Take a look at these examples of nesting:

nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

RUN VISUAL STUDIO AS ADMINISTRATOR

npm install webpack

npm install webpack-cli

npm i -D @babel/core @babel/preset-env babel-loader

npm i -D html-webpack-plugin

npm i -D webpack-dev-server

npm i -D clean-webpack-plugin
















Variables
Another great sass feature is actually one that’s available in vanilla css as well, but the intentional use of variables in stylesheets, especially when theming, can make for far more flexible and understandable styles.

$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
In CSS becomes:

body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
Perhaps that doesn’t look impressive, but what it means most certainly is. Imagine, you’ve built a website with hard coded values for font all throughout. The client comes to two days before launch, after the last pass of QA, and tells you that everything looks good but they want to change the font (as happens from time to time). You might cringe, because it will take you an hour to go through every single reference to font in the whole app, replace it with the new one and change sizes proportionally. Or, you might sigh a sigh of relief because you used a sass variable, and now all of those 170 references to font are all using the same single variable, you change that one value in your code, and can go to bed early that night instead of staying up and working.







USING THE AMPERSAND


SASS:

.parent{
  &.section {
      color: green;
  }
}

CSS:

.parent.section {
  color: green;
}


SASS:

button.cta {
  border-raddius: 3px;
  background: teal;
  color: white;

  &:hover {
      background: aqua;
  }

  &:visited {
      background: fuschhia;
  }
}



