npm install express

npm install body-parser

npm install cors

node server.js


SERVER.JS

const express = require('express');
const app = express();

const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: false}));
app.use(bodyParser.json());

const cors = require('cors');
app.use(cors());

app.use(express.static('website'));

const port = 8000;

const server = app.listen(port, listening);

function(listening) {
    console.log("server running");
    console.log('running on localhost: ${port}')
};

	OR

	const server = app.listen(port, ()=>{console.log(`running on localhost: ${port}`)})

	TO RUN:

	node server.js






amazing.js
const amazing = require('amazing.js');
app.use(amazing());





app.get('/', function (req, res) {
  res.send('hello world')
})




app.get('/all', sendData);

function sendData (request, response) {
  response.send(projectData);
};

OR

app.get('/all', function (request, response) {
  response.send(projectData);
});

OR

app.get('/all', (request, response)=> {
  response.send(projectData);
});





var express = require('express')
var app = express()
// Create JS object
const appData = {}
// Respond with JS object when a GET request is made to the homepage
app.get('/all', function (req, res) {
  res.send(appData)
})





// POST method route
app.post('/', function (req, res) {
  res.send('POST received')
})






Here is how you could setup a basic POST route in the server side code.

First, Create an array to hold data:

const data = []
Then, create post() with a url path and a callback function:

app.post('/addMovie', addMovie )
In the callback function, add the data received from request.body. This is the key piece of information we are interested in from that long stretch of data we saw previously that the request (req) argument returns.

function addMovie (req, res){
   console.log(req.body)
   data.push(req.body)
}





const data = [];
app.post('/flavor', addFlavor);

function addFlavor (req, res) {
  data.push(req.body);
};






So how do we actually activate our POST route, and how does it know what data to process? We will learn the answer to those questions in the next lesson, when we learn about connecting client and server code. So far we have just been working on the server side, but next we will learn how to POST and GET data from the browser.

Here is how you could setup a basic POST route in the server side code.

First, Create an array to hold data:

const data = []
Then, create post() with a url path and a callback function:

app.post('/addMovie', addMovie )
In the callback function, add the data received from request.body. This is the key piece of information we are interested in from that long stretch of data we saw previously that the request (req) argument returns.

function addMovie (req, res){
   console.log(req.body)
   data.push(req.body)
}






The parameters used here, req and res, are shortened versions of and equivalent to request and response, which are also often used for naming the parameters of route methods.


app.post('/add', callBack);

function callBack(req,res){
  res.send('POST received')
}






Add a POST route for adding a favorite animal via the path ’/animal’ to an array named data. You will need to create the array as well.

HIDE SOLUTION

const data = [];

app.post('/animal', addAnimal);

function addAnimal (req,res){
    data.push(req.body);
};









Assuming we have set up a POST route in the file server.js file, we will move into the website folder and start writing client side code in a file named app.js. Here is the code we could use to make a POST request to our route:

const postData = async ( url = '', data = {})=>{
    console.log(data);
      const response = await fetch(url, {
      method: 'POST', 
      credentials: 'same-origin',
      headers: {
          'Content-Type': 'application/json',
      },
     // Body data type must match "Content-Type" header        
      body: JSON.stringify(data), 
    });

      try {
        const newData = await response.json();
        console.log(newData);
        return newData;
      }catch(error) {
      console.log("error", error);
      }
  }

postData('/add', {answer:42});








Processing the POST request
So now that we know how to send a POST request from the client side, let's return to the server code and learn how to process the data we receive with our POST request. Remember, the last line of code in our previous example called our postData function, passing in the URL of the POST route, and an object containing the data to be posted. That line of code looked like this: postData('/add', {answer:42})

Back on the server side code we should now be able to receive the data answer:42. Remember in the last example, we attached our data to the body of our POST request, so to receive that data and make it actionable we can use request.body.

Here is an example where we set a variable named data to hold the value of request.body, and then print data to see what we received.

app.post('/add', function (request, response) {
    let data = request.body;
    console.log(data);
});
The output of this would display in ther terminal: {answer:42}

But we don't just want to see the data we received, to complete our POST request we must assign the data we received to our project endpoint, the JS object in our server code named projectData. We can simply make a new entry in our JS object using the syntax:

projectData["x"] = y

This code would create a new entry in our JS object API endpoint where the value of a string "x" is y. So if the data received from the POST request was {intelligence:100}, we could create a new entry in our endpoint with the code: let data = request.body; projectData["intelligence"]= data.intelligence;







const data = [{animal:"elephant", score: 10},{animal:"kangaroo",score:3}]

function makeData(request){

}

makeData({body:{animal:"turtle", score:7}})
Given the above code, which code block inside the functionmakeData would correctly use the input data to add a new JS object to the data array, following the same structure as the entries already present?

		let newData = request.body;
		let newEntry = {
			animal: newData.animal;
			score: newData.score;
			}
		data.push(newEntry);




Let's say there's a client side POST request written in a function, postData(). Assume postData() sent a POST request to your server with the data: {answer:42}. Complete the following server side code to add the body of the request directly to the project endpoint, named projectData.


...
projectData = [];
app.post('/add', function(request, response){
	projectData.push(request.body);   
}) 






ASYNCHRONUS:

setTimeout(function(){console.log('third')}, 3000);

function sync(){
	console.log('first');
}

sync();
console.log('second');





Async Promises
While there have always been some async work arounds in JS, including setTimeout(), and AJAX, more recently a tool called Promises has been introduced natively to JavaScript, and Promises are now the accepted best practice for writing asynchronous functions in JavaScript.

You can think of Promises as a special function that either satisfy (resolve) or fail (reject) to execute a task, and then executes the corresponding actions, usually another task with the returned data in the case of 'resolved' and usually throw an error in the case of 'reject'.

Here is the basic anatomy of a Promise:

var promise = new Promise(function(resolve, reject) {
  // do a thing, possibly async, then…

  if (/* everything turned out fine */) {
    resolve("Stuff worked!");
  }
  else {
    reject(Error("It broke"));
  }
});
There are many methods to handle asynchronous work already, however Promises are the recommended option because they give you flexibility, intuitive syntax, and easy error handling. Promises are an amazing development in JavaScript, but until ES2017 (ES8) they still required extra boilerplate code, called generators, to run asynchronously. Now however, with the addition of native async functions to JavaScript, we can easily apply the async keywords to a Promise to execute asynchronous JavaScript code.

To make a fetch() call, or any other methods inside of a function, asynchronous we must use the keywords provided by JavaScript. Here is an example of what it would look like to turn the fetch function from the previous example into an asynchronous function:

const postData = async ( url = '', data = {})=>{
    // console.log(data)
      const response = await fetch(url, {
      method: 'POST', // *GET, POST, PUT, DELETE, etc.
      credentials: 'same-origin', // include, *same-origin, omit
      headers: {
          'Content-Type': 'application/json',
      },
      body: JSON.stringify(data), // body data type must match "Content-Type" header        
    });

      try {
        const newData = await response.json();
        console.log(newData);
        return newData
      }catch(error) {
      console.log("error", error);
      // appropriately handle the error
      }
  }

  postData('/addMovie', {movie:' the matrix', score: 5})
postData is an async arrow function that is called with parameters on the last line of code. It is asynchronous because of the keyword async placed before its parameters. Once you mark a function as 'async' you have access to the keywords await, try, and catch which mirror the underlying Promise functionality of resolving or rejecting a condition-- here the condition is successfully making a POST request to the specified route. The await keyword is used in places where the next actions requires data from the current action so we want to tell our program to wait until the data has been received before continuing with the next steps-- this is the magic of ASYNC JavaScript.






APIs




let baseURL = 'http://api.animalinfo.org/data/?animal='
let apiKey = '&appid=9f15e45060...';

document.getElementById('generate').addEventListener('click', performAction);

function performAction(e){
const newAnimal =  document.getElementById('animal').value;
getAnimal(baseURL,newAnimal, apiKey)

}
const getAnimal = async (baseURL, animal, key)=>{

  const res = await fetch(baseURL+animal+key)
  try {

    const data = await res.json();
    console.log(data)
    return data;
  }  catch(error) {
    console.log("error", error);
    // appropriately handle the error
  }
}




// Async POST
const postData = async ( url = '', data = {})=>{

    const response = await fetch(url, {
    method: 'POST', 
    credentials: 'same-origin', 
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify(data), // body data type must match "Content-Type" header        
  });

    try {
      const newData = await response.json();
      return newData
    }catch(error) {
    console.log("error", error);
    }
}

// TODO-Async GET

const retrieveData = async (url='') =>{ 
  const request = await fetch(url);
  try {
  // Transform into JSON
  const allData = await request.json()
  }
  catch(error) {
    console.log("error", error);
    // appropriately handle the error
  }
}








Notice we have set up a helper function to use fetch to make an async GET request for a route that is made to simulate the Animal Info Web API we are using as an example.

Inside .then() we could call another async function to make a POST request to store this data in our app. Assuming a POST route has been setup on the server side to add data it received to the app endpoint, we could simply call the function we have been using to create POST requests on the client side and pass it the POST route url and the data we want to save to our app. The only tricky part (which can also be fun!), is that we need to use the returned data, and data that we retrieve from a DOM element to create the structure for our POST request.

As a reminder, the postData() function takes a URL, and a data object as parameters. To build the data object using data received from the previous fetch call we can use dot notation. So we could set our first elements like this:

postData('/addAnimal', {animal:data.animal, fact: data.fact} )

But we also want to include the users favorite thing about the animal, which we can add using the variable name which selects the textarea where the users response is. So our final code for creating a POST route to save the data to our app would look like this:

postData('/addAnimal', {animal:data.animal, fact: data.fact, fav:favFact} )

Then on the server side to actually add the sent data to our app, we would use this code:

app.post('/addAnimal', addAnimal);

function addAnimal(req,res){

  newEntry = {
    animal: req.body.animal,
    facts: req.body.fact,
    fav: req.body.fav
  }

  animalData.push(newEntry)
  console.log(animalData)
}



